cose da fare:

- mettere immagini:
   Issue:
      - ambiguità poison/toxic tra potion e overtime

   - img player                                         : fatte
   - img item: cura, pozioni, funghi                    : quasi fatte
   - ascia, mazza, spada                                : da fare
   - scudo assi di legno, scudo piccolo, scudo grande   : da fare

- introduzione di tipo{poison, toxic} anche in overTime
- pathCorrect e pathCorrectness anche in overtime e potion
- modifica Player -> int hp e non u_int
- modifica player.cpp -> prima controllo hp == 0, poi emit hpChanged()
- modificare descrizione consumable.h "somma/sottrae"
- fare prompt per creazione oggetti (si può creare: arma, scudo, curaHP, cura status, veleno, tossicità)
- gestione salvataggio su file
- gestione upload file
- decidere che fare in caso di Game Over -> (prompt chiusura / caricamento ultimo file)
- test su vm
- relazione

---------------------------------------------------------

            item (effect()=0)         |Inventario | Player | Model | View
      +---------+---------+           | lista di  |        | + inv |
 consumable             weapon        | item in   |        | + pl  |
   |     |             +-------+      | possesso  |        |       |
potion overTime     shield   regular  |           |        |       |

item:                     // classe astratta in cima alla gerarchia
   - nome
   - path
   - id
   + getID() const
   + setID(u_int)
   + string getName() const
   + virtual string descrizione() const
   + effect() =0         // slot

consumable: item
   - hpEffect            // può essere positivo o negativo a seconda di cosa sia
   + getEffect() const
   + virtual string descrizione() const
   + effect()            // slot
   + effectSignal(int)   // segnale

overTime: consumable     // oggetti a tempo (ogni tot chiamano effect)
   - timer               // ogni quanto tempo viene attivato l'effetto
   - status              // se attivo o meno (di default: no)
   - counter             // attivazioni massime (default: -1 -> infinite)
   + isActive() const
   + getTimer() const
   + virtual string descrizione() const
   + effect()              // modifica counter e ritorna il valore direttamente da Consumable::effect() -> hpEffect
   + stopOT()              // ferma l'effetto fermando il timer (emette segnale di stop)
   + startOT()             // attiva il timer
   + over()                // segnale di termine effetto

potion: consumable
   - tipo t 
   + getType() const
   + getTypeString() const
   + virtual string descrizione() const

weapon: item
   - atk
   - bool equipped
   + getValue() const
   + effect()            // ritorna atk
   + isEquipped() const
   + virtual string descrizione() const

regular: weapon
   - atk
   + effect()
   + getAtTK() const
   + virtual string descrizione() const

shield: weapon
   - def                 // percentuale riduzione danni fisici
   + effect()
   + getDEF() const
   + virtual string descrizione() const

Player: 
   - hp
   - atk
   - def
   - status
   - path
   - pathCorrect()
   - pathCorrectness() const
   + getStatus() const
   + getPath() const
   + getStatusString() const
   + getHp() const
   + getDefense() const
   + getAttack() const
   + setDef()            // slot
   + setAtk()            // slot
   + changeHP()          // slot
   + changeStatus()      // slot
   + statusChanged()     // signal
   + hpChanged()         // signal
   + atkChanged()        // signal
   + defChanged()        // signal

inventario:
   - nodo:
      + item* itm
      + nodo* next
   - nodo* first
   + iteratore:
      - nodo* ptr
      + operator..
   - getHighestID() const
   - setID(item*)
   + operator[] const
   + begin() const
   + end() const
   + insertItm(item*)
   + removeItm(item*)
   + size() const

model: 
   - Player* pl
   - inventario inv 
   - connectToPlayer() const
   + Item* selectItemByID(int id) const
   + invSize() const
   + Player* getPlayer() const;
   + insert(item*)
   + remove(item*)
   + use(item*)
   + stopOverTime()         // slot
   + playerHpChanged();     // slot
   + playerStatusChanged(); // slot
   + playerAtkChanged();    // slot
   + playerDefChanged();    // slot
   + changedHp();           // signal
   + changedStatus();       // signal
   + changedAtk();          // signal
   + changedDef();          // signal

ShowButton : QPushButton
   - tipo tempo
   + onClicked()    // slot
   + click(tipo)

View:
   - model*
   - rowSel
   - colSel
   - ... (tutti elementi GUI)
   - connectModel()
   - setupGui()
   - connectGui()
   - loadInv()
   - loadRow()
   - slot per model: hp/status/atk/def
   - slot per tabella: cellSelected
   - slot per bottomButtons: on Remove/Create/Use/Equip
   - slot per upButton: showOnly()