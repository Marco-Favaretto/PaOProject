inventario videogioco:
UI: inventario a schede

                item (effect()=0)
    +---------------+-------+----------/ /--------+
consumable                weapon =0            passive
   +-------+            +-------+---------+      (ring/armor)     
static     ot        strike   thrust   regular


                item (effect()=0)
    +-----------+---------+
 consumable =0?        weapon =0?
   +-------+           +-------+    
cure     ot       strike   regular


eliminazione static
overTime diventa specializzazione di consumable, che se overTime forza la chiamata effect() ogni timer

cure tiene un riferimento a ot per fermare timer / oppure cura = sempre ot, ma con timer nullo
cura cambia stato di Player
Player lancia segnale che Ã¨ tornato normale, viene raccolto da ot che blocca il timer


view ---- model --- container e iteratore ----- classe base ( gerarchia )

model = Player* e container
contenitore di item -> array allocato dinamicamente

rendere il model il Player e il gestore dei timer, ossia:
model = hp, timer, contenitore