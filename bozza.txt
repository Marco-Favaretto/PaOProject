cose da fare:

- test su vm
   - correzione path
- relazione

----------------------
Issue:

------------------------
Proposals:
- loadLastGame() -> carica ultimo salvataggio
   - implica creare un ulteriore file in cui salvare il path dell'ultimo salvataggio
   - caricare l'ultimo salvataggio
- passaggi per riferimento dove possibile

-------------------------
Da ricordare:
Scrivere dei distruttori di Qt in relazione

---------------------------------------------------------

           item (effect()=0)          |Inventario | Player | Model | View
      +---------+---------+           | lista di  |        | - inv | - mod*
 consumable             weapon        | item in   |        | - pl* |
   |     |             +-------+      | possesso  |        |       |
potion overTime     shield   regular  |           |        |       |

item:                     // classe astratta in cima alla gerarchia
   - nome
   - path
   - id
   + Item(...)
   + Item(const Item&)
   + getID() const
   + setID(u_int)
   + string getName() const
   + getItemPath() const
   + setPath(string)
   + setName(string)
   + virtual string descrizione() const
   + clone() const =0
   + effect() =0         // slot

consumable: item
   - hpEffect            // puÃ² essere positivo o negativo a seconda di cosa sia
   + Consumable(...)
   + Consumable(const Consumable&)
   + getEffect() const
   + virtual string descrizione() const
   + setEffect(int)
   + static fromJson(...);
   + clone() const
   + toJson() const;
   + effect()            // slot
   + effectSignal(int)   // segnale

overTime: consumable     // oggetti a tempo (ogni tot chiamano effect)
   - tipo t              // se poison o toxic
   - status              // se attivo o meno (di default: no)
   - counter             // attivazioni massime (default: -1 -> infinite)
   - pathCorrect()
   - pathCorrectness() const
   - setTimer(int)
   - static intToTipo()
   + overTime(tipo, ...)
   + overTime(const overTime&)
   + clone() const
   + isActive() const
   + getTimer() const
   + getType() const
   + virtual string descrizione() const
   + static fromJson(...);
   + toJson() const;
   + effect()              // modifica counter e ritorna il valore direttamente da Consumable::effect() -> hpEffect
   + stopOT()              // ferma l'effetto fermando il timer (emette segnale di stop)
   + startOT()             // attiva il timer
   + over(overTime*)       // segnale di termine effetto

potion: consumable
   - tipo t 
   - pathCorrect()
   - pathCorrectness() const
   - static intToTipo(int)
   + Potion(tipo,...)
   + Potion(const Potion&)
   + clone() const
   + getType() const
   + getTypeString() const
   + virtual string descrizione() const
   + static fromJson(...);
   + toJson() const;

weapon: item
   - atk
   - bool equipped
   + Weapon(...)
   + Weapon(const Weapon&)
   + getValue() const
   + effect()            // ritorna atk
   + isEquipped() const
   + virtual string descrizione() const
   + statSignal(int)    // segnale

regular: weapon
   - atk
   + Regular(...)
   + Regular(const Regular&)
   + effect()
   + clone() const
   + getAtTK() const
   + virtual string descrizione() const
   + static fromJson(...);
   + toJson() const;

shield: weapon
   - def                 // percentuale riduzione danni fisici
   + Shield(...)
   + Shield(const Shield&)
   + clone() const
   + effect()
   + getDEF() const
   + virtual string descrizione() const
   + static fromJson(...);
   + toJson() const;

Player: 
   - hp
   - atk
   - def
   - status
   - path
   - pathCorrect()
   - pathCorrectness() const
   - death()
   - static intToTipo(int)
   + Player(...)
   + Player(const Player&)
   + getStatus() const
   + getPath() const
   + getStatusString() const
   + getHp() const
   + getDefense() const
   + getAttack() const
   + static fromJson(...);
   + toJson() const;
   + setDef()            // slot
   + setAtk()            // slot
   + changeHP()          // slot
   + changeStatus()      // slot
   + statusChanged()     // signal
   + hpChanged()         // signal
   + atkChanged()        // signal
   + defChanged()        // signal
   + dead()              // signal

inventario:
   - nodo:
      + item* itm
      + nodo* next
      + static fromJson(...);
      + toJson() const;
   - nodo* first
   + iteratore:
      - nodo* ptr
      + operator..
   - distruggi(nodo*) static
   - copia(const Inventario&) static
   - setID(item*)
   + getHighestID() const
   + operator[] const
   + begin() const
   + end() const
   + insertItm(item*)
   + removeItm(item*)
   + Inventario()
   + Inventario(const Inventario&)
   + operator=(const Inventario&)
   + static fromJson(...);
   + toJson() const;
   + size() const
   + clear()

model: 
   - Player* pl
   - inventario inv 
   - connectToPlayer() const
   + model()
   + model(Player*, Inventario)
   + Item* selectItemByID(int id) const
   + invSize() const
   + Player* getPlayer() const;
   + insert(item*)
   + remove(item*)
   + use(item*)
   + getMaxId() const
   + fromJson(...);
   + toJson() const;
   + loadGame();
   + saveGame() const;
   + stopOverTime()         // slot
   + playerHpChanged();     // slot
   + playerStatusChanged(); // slot
   + playerAtkChanged();    // slot
   + playerDefChanged();    // slot
   + playerDied()           // slot
   + changedHp();           // signal
   + changedStatus();       // signal
   + changedAtk();          // signal
   + changedDef();          // signal
   + playerDead()           // signal

ShowButton : QPushButton
   - tipo t
   + onClicked()    // slot
   + click(tipo)

ShowAction : QAction
   - tipo t
   + onClicked()    // slot
   + click(tipo)

creationDialog: QDialog
   - ... (tutti gli elementi gui del dialog)
   - rowSel
   - fromComboTipo
   - effetto
   - nome
   - turni
   - bool tipo
   - bool effect
   - bool nomeCheck
   - void setupDialog()
   - void comboBoxTipo()
   - void comboBoxNome()
   - bool doneEverything() const
   - void resetDialog()
   - onListWidget()
   - onTipoBox()            // slot
   - onNomeBox()            // slot
   - onEffetto()            // slot
   - onturni()              // slot
   - onCreationButton()     // slot
   - onCreateButton(item*)  // signal

View:
   - model*
   - rowSel
   - colSel
   - ... (tutti elementi GUI)
   - connectModel()
   - setupGui()
   - connectGui()
   - loadInv()
   - loadRow(int)
   - loadPlayerPic()
   - loadItemPic()
   - loadItemPicDefault();
   - slot per model:          playerDeath()
   - slot per model:          hp/status/atk/def
   - slot per tabella:        cellSelected
   - slot per bottomButtons:  on Remove/Create/Use/Equip
   - slot per upButton:       showOnly(Showbutton::tipo)
   - slot creation:           creationItem(Item*);
   - slot per load:           loadGame()
   - slot per save:           saveGame()
   - slot per close on death: closeSlot()